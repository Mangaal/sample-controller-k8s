/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "sample-controller-k8s/pkg/apis/appreplica/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppReplicaLister helps list AppReplicas.
// All objects returned here must be treated as read-only.
type AppReplicaLister interface {
	// List lists all AppReplicas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppReplica, err error)
	// AppReplicas returns an object that can list and get AppReplicas.
	AppReplicas(namespace string) AppReplicaNamespaceLister
	AppReplicaListerExpansion
}

// appReplicaLister implements the AppReplicaLister interface.
type appReplicaLister struct {
	indexer cache.Indexer
}

// NewAppReplicaLister returns a new AppReplicaLister.
func NewAppReplicaLister(indexer cache.Indexer) AppReplicaLister {
	return &appReplicaLister{indexer: indexer}
}

// List lists all AppReplicas in the indexer.
func (s *appReplicaLister) List(selector labels.Selector) (ret []*v1alpha1.AppReplica, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppReplica))
	})
	return ret, err
}

// AppReplicas returns an object that can list and get AppReplicas.
func (s *appReplicaLister) AppReplicas(namespace string) AppReplicaNamespaceLister {
	return appReplicaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppReplicaNamespaceLister helps list and get AppReplicas.
// All objects returned here must be treated as read-only.
type AppReplicaNamespaceLister interface {
	// List lists all AppReplicas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppReplica, err error)
	// Get retrieves the AppReplica from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppReplica, error)
	AppReplicaNamespaceListerExpansion
}

// appReplicaNamespaceLister implements the AppReplicaNamespaceLister
// interface.
type appReplicaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppReplicas in the indexer for a given namespace.
func (s appReplicaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppReplica, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppReplica))
	})
	return ret, err
}

// Get retrieves the AppReplica from the indexer for a given namespace and name.
func (s appReplicaNamespaceLister) Get(name string) (*v1alpha1.AppReplica, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appreplica"), name)
	}
	return obj.(*v1alpha1.AppReplica), nil
}
