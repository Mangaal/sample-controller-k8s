/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "sample-controller-k8s/pkg/api/myappdeployment/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyAppDeploymentLister helps list MyAppDeployments.
// All objects returned here must be treated as read-only.
type MyAppDeploymentLister interface {
	// List lists all MyAppDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MyAppDeployment, err error)
	// MyAppDeployments returns an object that can list and get MyAppDeployments.
	MyAppDeployments(namespace string) MyAppDeploymentNamespaceLister
	MyAppDeploymentListerExpansion
}

// myAppDeploymentLister implements the MyAppDeploymentLister interface.
type myAppDeploymentLister struct {
	indexer cache.Indexer
}

// NewMyAppDeploymentLister returns a new MyAppDeploymentLister.
func NewMyAppDeploymentLister(indexer cache.Indexer) MyAppDeploymentLister {
	return &myAppDeploymentLister{indexer: indexer}
}

// List lists all MyAppDeployments in the indexer.
func (s *myAppDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.MyAppDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyAppDeployment))
	})
	return ret, err
}

// MyAppDeployments returns an object that can list and get MyAppDeployments.
func (s *myAppDeploymentLister) MyAppDeployments(namespace string) MyAppDeploymentNamespaceLister {
	return myAppDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyAppDeploymentNamespaceLister helps list and get MyAppDeployments.
// All objects returned here must be treated as read-only.
type MyAppDeploymentNamespaceLister interface {
	// List lists all MyAppDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MyAppDeployment, err error)
	// Get retrieves the MyAppDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MyAppDeployment, error)
	MyAppDeploymentNamespaceListerExpansion
}

// myAppDeploymentNamespaceLister implements the MyAppDeploymentNamespaceLister
// interface.
type myAppDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyAppDeployments in the indexer for a given namespace.
func (s myAppDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MyAppDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyAppDeployment))
	})
	return ret, err
}

// Get retrieves the MyAppDeployment from the indexer for a given namespace and name.
func (s myAppDeploymentNamespaceLister) Get(name string) (*v1alpha1.MyAppDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("myappdeployment"), name)
	}
	return obj.(*v1alpha1.MyAppDeployment), nil
}
